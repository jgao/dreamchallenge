/*

Pollux
Copyright (C) 2014  Eric Marinier

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include "JellyfishKMerHashTable.h"
#include "Correction.h"

int KI_LENGTH = 15; // first 15 of 31 in 31-mer
int KR_LENGTH = 16; // last 16 of 31 in 31-mer

int KMER_LENGTH = 31;

unsigned int nucleotideAlphaToNumeric(char nucleotide) {
    if (nucleotide == 'A') return 0x0;
    if (nucleotide == 'G') return 0x1;
    if (nucleotide == 'C') return 0x2;
    if (nucleotide == 'T') return 0x3;

    printf("error: could not match nucleotide %c\n", nucleotide);
    return 0x0;
}

// from Reads.c
// TODO: refactor so we don't have repeated code
void tdeleteCharacter(char* string, int pos)
{
    int length = strlen(string);
    
    if (pos < 0 || pos >= length)
        return;
    
    for(int i = pos; i < length; i++)
    {
        string[i] = string[i + 1];
    }
    
    string[length] = '\0';
}
void ttrimSpaces(char* string)
{
    // Delete leading spaces.
    while(strlen(string) >= 1 && isspace(string[0]))
    {
        tdeleteCharacter(string, 0);
    }
    
    // Delete trailing N's.
    while(strlen(string) >= 1 && isspace(string[strlen(string) - 1]))
    {
        tdeleteCharacter(string, strlen(string) - 1);
    }
}

/*
static inline void printProgress(int x, int n, int r)
{
    // Only update r times.
    if (n/r == 0 || x % (n/r) != 0) return; // Mod 0 causes problems.
    
    double result;
    
    if(n / r != 1)
        result = x / (n/r) * (100/r);
    else
        result = (x + 1) / ((double)n/(double)r) * ((double)100/(double)r);
 
    printf("%d%% ", (int)result);
    fflush(stdout);
}
*/

/*
void preprocessKMers(KMerHashTable* kmerTable, Correction* correction)
{
    // Data structures:
    HashTable* hashTable = kmerTable->table;
    HashTableIterator iterator;
    
    unsigned long long int MAX_KMER_COUNT = (1024 + 1);
    unsigned long long int counts[MAX_KMER_COUNT];
    
    unsigned long long int kmer;    
    unsigned long long int count;
    
    unsigned long long int current = 0;
    unsigned long long int total = hash_table_num_entries(hashTable);
    
    unsigned long long int unique = 0;
    
    hash_table_iterate(hashTable, &iterator);
    
    // Initialize Counts:
    for (int i = 0; i < MAX_KMER_COUNT; i++)
    {
        counts[i] = 0;
    }
    
    // Iterate Over K-Mers:
    while(hash_table_iter_has_more(&iterator))
    {
        printProgress(current, total, 20);
        current++;
        
        kmer = (unsigned long long int)hash_table_iter_next_key(&iterator);
        count = (unsigned long long int)hash_table_lookup(hashTable, (HashTableKey)(kmer));

        // Tally Counts:
        if(count <= MAX_KMER_COUNT)
        {
            counts[count] += 1;
        }
        
        // Remove Unique:
        if(count == 1)
        {
            hash_table_remove(hashTable, (HashTableKey)(kmer), false);
            unique++;
        }
    }
    
    // Unique K-Mer Information:
    printf("\n");    
    printf("Removed %llu unique k-mers from the set of %llu total k-mers.\n", unique, total);
    
    printf("Resizing...\n");
    hash_table_resize(hashTable);
    printf("Finished resizing...\n");
    
    unsigned int currentKMerCount = 1;
        
    // Loop until we find a low-to-high number transitions:
    while (currentKMerCount <= MAX_KMER_COUNT && counts[currentKMerCount] > counts[currentKMerCount + 1])
    {
        currentKMerCount++;
    }
    
    if(currentKMerCount < MAX_KMER_COUNT)
    {
        correction->lowKMerThreshold = currentKMerCount;
    }
    
   printf("Low k-mer count value was observed to be %d.\n", currentKMerCount);
}
*/

// TODO: make this do transforms like Pollux
unsigned long long int getKMerNumeric(char* kmer_alpha)
{
    unsigned long long int result = 0x0;
    
    for (int i = 0; i < KMER_LENGTH; i++) {
        result = (result | nucleotideAlphaToNumeric(kmer_alpha[i])) << 2;
    }

    return result;
}


const unsigned long long int HIMASK = 0xFFFFFFFF00000000;
const unsigned long long int LOMASK = 0x00000000FFFFFFFF;

// Note M2 is the one with the 00 ending
const unsigned long long int M1 = 0x55555553;
const unsigned long long int M2 = 0xAAAAAAAC;

unsigned int getKI(unsigned long long int kmer)
{
    // const unsigned long long int KIMASK = 0x00000000FFFFFFFF;
    
    unsigned int hi = (kmer & HIMASK) >> 32;
    unsigned int lo = (kmer & LOMASK);

    return ((hi & M2) + (lo & M1)) >> 2; // we get rid of the last 2 bits
}

unsigned int getKR(unsigned long long int kmer)
{
    // const unsigned long long int KRMASK = 0xFFFFFFFF00000000;

    unsigned int hi = (kmer & HIMASK) >> 32;
    unsigned int lo = (kmer & LOMASK);

    return ((hi & M1) + (lo & M2)); // we get rid of the last 2 bits 
}

JellyfishKMerHashTable* newJellyfishKMerHashTable(char* filename)
{
printf("START OF BUILDING JELLYFISH HASHTABLE\n");
    JellyfishKMerHashTable* table = (JellyfishKMerHashTable*)malloc(sizeof(JellyfishKMerHashTable));
 
    table->num_possible_ki = 1 << (KI_LENGTH * 2); // shortcut to 2 ^ (KI_LENGTH * 2)
    
    table->ki_index = (unsigned long long int*)malloc(table->num_possible_ki * sizeof(unsigned long long int));
    table->num_kr_per_ki = (unsigned long long int*)malloc(table->num_possible_ki * sizeof(unsigned long long int));

    // TODO: add another counter for dream challenge stuff

    FILE* jellyfish_file = fopen(filename, "r");

    for (int i = 0; i < table->num_possible_ki; i++) {
        table->ki_index[i] = 0;
        table->num_kr_per_ki[i] = 0;
    }

    // first pass of file: read occurences of each KI
    char count_line[KMER_LENGTH + 10];
    char kmer_alpha[KMER_LENGTH + 10];

    while (fgets(count_line, KMER_LENGTH + 10, jellyfish_file) != NULL
        && fgets(kmer_alpha, KMER_LENGTH + 10, jellyfish_file) != NULL) {
        
        ttrimSpaces(count_line);
        tdeleteCharacter(count_line, 0);

        ttrimSpaces(kmer_alpha);

        int kmer_count = (int)strtod(count_line, NULL);

        // ignore all kmers appearing once
        if (kmer_count == 1) continue;

        unsigned long long int kmer_numeric = getKMerNumeric(kmer_alpha);

        unsigned int ki = getKI(kmer_numeric);

        table->ki_index[ki]++;
    }

    fclose(jellyfish_file);
printf("DONE FIRST PASS\n");
    unsigned long long int cumulative_sum = 0;
    // we want a cumulative index, so we do a roll-up sum
    for (unsigned int i = 0; i < table->num_possible_ki; i++) {
        // the i-1th index should already be rolled up
        unsigned long long int temp = table->ki_index[i];
        table->ki_index[i] = cumulative_sum;
        cumulative_sum = cumulative_sum + temp;
    }

    // total amount of kmers is just the final cumulative_sum
    table->num_kmer = cumulative_sum;

    table->kr_list = (unsigned int*)malloc(table->num_kmer * sizeof(unsigned int));
    table->kmer_frequency = (unsigned int*)malloc(table->num_kmer * sizeof(unsigned int));

    // second pass we build the counters by each KR
    jellyfish_file = fopen(filename, "r");

    while (fgets(count_line, KMER_LENGTH + 10, jellyfish_file) != NULL
        && fgets(kmer_alpha, KMER_LENGTH + 10, jellyfish_file) != NULL) {
        
        ttrimSpaces(count_line);
        tdeleteCharacter(count_line, 0);

        ttrimSpaces(kmer_alpha);

        int kmer_count = (int)strtod(count_line, NULL);

        // ignore all kmers appearing once
        if (kmer_count == 1) continue;

        unsigned long long int kmer_numeric = getKMerNumeric(kmer_alpha);

        unsigned int ki = getKI(kmer_numeric);
        unsigned int kr = getKR(kmer_numeric);

        unsigned long long int kr_list_start_pos = table->ki_index[ki];
        
        table->kr_list[kr_list_start_pos + table->num_kr_per_ki[ki]] = kr;
        table->kmer_frequency[kr_list_start_pos + table->num_kr_per_ki[ki]] = kmer_count;

        table->num_kr_per_ki[ki]++;
    }

    fclose(jellyfish_file);
printf("END OF BUILDING JELLYFISH HASHTABLE\n");

    return table;
}


// Assumes kmer is 31 characters long
unsigned long long int JellyfishKMerTableLookup(JellyfishKMerHashTable* kmerTable, unsigned long long int kmer)
{
    unsigned int ki = getKI(kmer);
    unsigned int kr = getKR(kmer);

    unsigned long long int kr_list_start_pos = kmerTable->ki_index[ki];
    int count = 0;

    for (unsigned int i = 0; i < kmerTable->num_kr_per_ki[ki]; i++) {
        if (kmerTable->kr_list[kr_list_start_pos + i] == kr) {
            count = kmerTable->kmer_frequency[kr_list_start_pos + i];
            break;
        }
    }
    
    // because we discard unique kmers, we (optimistically) assume that uncatalogued kmers have a count of 1
    if(count == 0)
    {
        count = 1;
    }
    
    return count;
}

unsigned int getMaxJellyfishKMerCount(JellyfishKMerHashTable* kmerTable)
{
    unsigned int max = -1;
    printf("inside get maxcount %llu\n", kmerTable->num_kmer);
    for (unsigned long long int i = 0; i < kmerTable->num_kmer; i++) {
        max = getMax(max, kmerTable->kmer_frequency[i]);
    }
    
    return max;
}

unsigned int* createJellyfishDistribution(JellyfishKMerHashTable* kmerTable, unsigned int max)
{    
    unsigned int* distribution = (unsigned int*)malloc((max + 1) * sizeof(unsigned int));
    
    // Initialize:
    for(int i = 0; i <= max; i++)
    {
        distribution[i] = 0;
    }

    for (unsigned long long int i = 0; i < kmerTable->num_kmer; i++) {
        if (kmerTable->kmer_frequency[i] > max) continue;

        distribution[kmerTable->kmer_frequency[i]]++;
    }
    
    return distribution;
}

void freeJellyfishKMerHashTable(JellyfishKMerHashTable* kmerTable) {
    free(kmerTable->ki_index);
    free(kmerTable->num_kr_per_ki);
    free(kmerTable->kr_list);
    free(kmerTable->kmer_frequency);

    free(kmerTable);
}

/*
unsigned int getNumRepeats(KMerHashTable* kmerTable)
{   
    // Variables:
    unsigned int repeats = 0;
    unsigned int max = getMaxKMerCount(kmerTable);
    
    // Data Structures:
    unsigned int* distribution = createDistribution(kmerTable, max);    

    for(int i = 2; i <= max; i++)
    {
        repeats += distribution[i] * i;
    }
    
    free(distribution);
    
    return repeats;
}
*/


